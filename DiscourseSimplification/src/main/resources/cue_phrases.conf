cue_phrases {
    default_phrases {
        matching = contained
        phrases {
            // CONTRAST
            "although" = CONTRAST
            "but" = CONTRAST
            "but now" = CONTRAST
            "despite" = CONTRAST
            "even though" = CONTRAST
            "even when" = CONTRAST
            "except when" = CONTRAST
            "however" = CONTRAST
            "instead" = CONTRAST
            "rather" = CONTRAST
            "still" = CONTRAST
            "though" = CONTRAST
            "thus" = CONTRAST
            "until recently" = CONTRAST
            "while" = CONTRAST
            "yet" = CONTRAST

            // LIST
            "and" = LIST
            "in addition" = LIST
            "in addition to" = LIST
            "moreover" = LIST

            // DISJUNCTION
            "or" = DISJUNCTION

            // CAUSE
//          "largely because" = CAUSE_C
            "because" = CAUSE_C // changed from EXPLANATION TO CAUSE
            "since" = CAUSE_C // changed from TEMPORAL_AFTER TO CAUSE

            // RESULT
            "as a result" = RESULT_C
            "as a result of" = RESULT_C

            // TEMPORAL_AFTER
            "after" = TEMPORAL_AFTER_C
            "and after" = TEMPORAL_AFTER_C
            "next" = TEMPORAL_AFTER_C
            "then" = TEMPORAL_AFTER_C

            // TEMPORAL_BEFORE
            "before" = TEMPORAL_BEFORE_C
            "previously" = TEMPORAL_BEFORE_C  // changed from BACKGROUND TO TEMPORAL_BEFORE

            // BACKGROUND
            "as" = BACKGROUND
            "now" = BACKGROUND
            "once" = BACKGROUND
            "when" = BACKGROUND
            "with" = BACKGROUND
            "without" = BACKGROUND

            // CONDITION
            "if" = CONDITION
            "in case" = CONDITION
            "unless" = CONDITION
            "until" = CONDITION

            // ELABORATION
            "more provocatively" = ELABORATION
            "even before" = ELABORATION
            "for example" = ELABORATION
            "further" = ELABORATION
            "recently" = ELABORATION
            "since(\\W(.*?\\W)?)now" = ELABORATION
            "so" = ELABORATION
            "so far" = ELABORATION
            "where" = ELABORATION
            "whereby" = ELABORATION
            "whether" = ELABORATION

//          // EXPLANATION
//          "simply because" = EXPLANATION
//          "because of" = EXPLANATION
//          "indeed" = EXPLANATION
//          "so(\\W(.*?\\W)?)that" = EXPLANATION
        }
    }

    subordinating_phrases {
        matching = contained
        phrases = ${cue_phrases.default_phrases.phrases}
        phrases {
            // CAUSE
//          "largely because" = CAUSE
            "because" = CAUSE // changed from EXPLANATION TO CAUSE
            "since" = CAUSE // changed from TEMPORAL_AFTER TO CAUSE

            // RESULT
            "as a result" = RESULT
            "as a result of" = RESULT

            // TEMPORAL_AFTER
            "after" = TEMPORAL_BEFORE
            "and after" = TEMPORAL_BEFORE
            "next" = TEMPORAL_AFTER
            "then" = TEMPORAL_AFTER

            // TEMPORAL_BEFORE
            "before" = TEMPORAL_AFTER
            "previously" = TEMPORAL_AFTER  // changed from BACKGROUND TO TEMPORAL_BEFORE
        }
    }

    coordinating_phrases {
        matching = contained
        phrases = ${cue_phrases.default_phrases.phrases}
    }

    adverbial_phrases {
        matching = exact
        phrases = ${cue_phrases.default_phrases.phrases}
        phrases {
            // CAUSE
//          "largely because(\\W(.*?\\W)?)(this|that)" = CAUSE_C
            "because(\\W(.*?\\W)?)(this|that)" = CAUSE_C // changed from EXPLANATION TO CAUSE

            // RESULT
            "as a result(\\W(.*?\\W)?)(this|that)" = RESULT_C
            "as a result of(\\W(.*?\\W)?)(this|that)" = RESULT_C

            // TEMPORAL_AFTER
            "after(\\W(.*?\\W)?)(this|that)" = TEMPORAL_AFTER_C
            "and after(\\W(.*?\\W)?)(this|that)" = TEMPORAL_AFTER_C

            // TEMPORAL_BEFORE
            "before(\\W(.*?\\W)?)(this|that)" = TEMPORAL_BEFORE_C
            "previously(\\W(.*?\\W)?)(this|that)" = TEMPORAL_BEFORE_C  // changed from BACKGROUND TO TEMPORAL_BEFORE
        }
    }
}